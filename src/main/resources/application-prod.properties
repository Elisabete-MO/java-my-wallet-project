spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE\
  }?sslmode\=disable
# spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=create

# spring.jpa.show-sql=false
# spring.jpa.properties.hibernate.format_sql=false

# server.port=8080

# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# run/debug configuration: criar as variaveis de ambiente do railway em um
# perfil prod
# SPRING_PROFILE_ACTIVE=prod
# PGDATABASE=railway
# PGHOST=containers(...) (vide railway)
# PGPASSWORD=(vide railway)
# PGPORT=(vide railway)
# PGUSER=postgres

# verificar demais informações comentadas (depois da primeira criação mudar o
# ddl-auto para validate)
# verificar: se precisa direcionar o caminho da main class para
# WalletApplication
# o q colocar no procfile? (web: java -jar target/wallet-0.0.1-SNAPSHOT.jar ?)
# acho q tem q gerar algo do tipo .jar
#depois de criar o db, criar (new) para importar o projeto do github para o
# railway. Detalhe: o railway "tem" q encontrar o projeto na lista
# GERAR UM DOMINIO NO RAILWAY (o swagger tem q funcionar no dominio com /swagger-ui.html)
# Configurar a SPRING_PROFILES_ACTIVE:prod no railway nas variaveis globais
# (Project Settings e Shared Variables) e configurar as variáveis de ambiente
# acima no projeto java dentro do railway (VARIABLES) (PGDATABASE, PGHOST,
# PGPASSWORD, PGPORT, PGUSER) mais o PORT=8080
```

